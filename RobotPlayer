package examplefuncsplayer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import battlecode.common.*;

public strictfp class RobotPlayer {
	static RobotController rc;
	static int GARDENER_DISTRESS_CHANNEL = 2;
	static int GARDENER_PRODUCTION_CHANNEL = 1;
	static int ARCHON_DISTRESS_CHANNEL = 3;
	static int ARCHON_NUM_CHANNEL = 4;
	static int ARCHON_PRODUCTION_CHANNEL = 5;
	static int ARCHON_TOTAL_CHANNEL = 6;
	static Team ourTeam;
	static Team opponentTeam;
	

	/**
	 * run() is the method that is called when a robot is instantiated in the Battlecode world.
	 * If this method returns, the robot dies!
	 **/
	@SuppressWarnings("unused")
	public static void run(RobotController rc) throws GameActionException {

		// This is the RobotController object. You use it to perform actions from this robot,
		// and to get information on its current status.
		RobotPlayer.rc = rc;
		ourTeam = rc.getTeam();
		opponentTeam = rc.getTeam().opponent();


		// Here, we've separated the controls into a different method for each RobotType.
		// You can add the missing ones or rewrite this into your own control structure.
		switch (rc.getType()) {
		case ARCHON:
			runArchon();
			break;
		case GARDENER:
			runGardener();
			break;
		case SOLDIER:
			runSoldier();
			break;
		case LUMBERJACK:
			runLumberjack();
			break;
		case SCOUT:
			runScout();
			break;
		case TANK:
			runTank();
			break;

		}
	}


	static void runArchon() throws GameActionException {
		MapLocation[] initialArchonLoc = rc.getInitialArchonLocations(rc.getTeam());
		int numberOfArchons = initialArchonLoc.length;
		rc.broadcast(ARCHON_TOTAL_CHANNEL, numberOfArchons);
		int archonNum = 0;
		boolean pinged = false;
		int numDecs = 0;
		for(int i = 0; i < numberOfArchons; i++) {
			if(rc.getLocation().equals(initialArchonLoc[i])) {
				archonNum = i;
			}
		}
			rc.broadcast(GARDENER_PRODUCTION_CHANNEL, numberOfArchons*-2);
			System.out.println(rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL));
		// The code you want your robot to perform every round should be in this loop
		while (true) {
			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				if (rc.getHealth()<10 && !pinged){
					rc.broadcast(ARCHON_DISTRESS_CHANNEL, rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)+1);
					rc.broadcast(ARCHON_NUM_CHANNEL, archonNum);
					rc.broadcast(ARCHON_TOTAL_CHANNEL, rc.readBroadcast(ARCHON_TOTAL_CHANNEL)-1);
					pinged = true;
				}
				if (rc.readBroadcast(ARCHON_TOTAL_CHANNEL)-rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)<rc.readBroadcast(ARCHON_TOTAL_CHANNEL)){
					if (archonNum>rc.readBroadcast(ARCHON_NUM_CHANNEL) && numDecs<rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)){
						archonNum--;
						numDecs++;
					}
					
				}
				// Generate a random direction
				Direction dir = randomDirection();
				int distressSignals = rc.readBroadcast(GARDENER_DISTRESS_CHANNEL);
				int deadGardeners = rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL);
				if (rc.canHireGardener(dir) && checkGardeners(deadGardeners, distressSignals)) {
					// figure out which archon will build gardener
					if(Math.abs(deadGardeners) % (rc.readBroadcast(ARCHON_TOTAL_CHANNEL)) == archonNum) {
						rc.hireGardener(dir);
						rc.broadcast(GARDENER_PRODUCTION_CHANNEL, rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL)+1);
					}					
				}

				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Archon Exception");
				e.printStackTrace();
			}
		}
	}
	static boolean checkGardeners(int deadGardeners, int distressSignals) throws GameActionException{
		if (distressSignals > deadGardeners){
			return true;
		}
		return false;
	}

	static void runGardener() throws GameActionException {
		System.out.println("I'm a gardener!");
		boolean toProduce = false;
		boolean pinged = false;
		while (true){
			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				
				// Generate a random direction
				Direction dir = randomDirection();

				if (rc.getHealth()<5 && !pinged){
					rc.broadcast(GARDENER_DISTRESS_CHANNEL, rc.readBroadcast(GARDENER_DISTRESS_CHANNEL)+1);
					pinged = true;
				}
				if (rc.readBroadcast(GARDENER_DISTRESS_CHANNEL) != rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL)) {
					toProduce = false;
					System.out.println("Distress " + rc.readBroadcast(GARDENER_DISTRESS_CHANNEL));
					System.out.println("Production " + rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL));
				} else {
					toProduce = true;
				}
				if(rc.canBuildRobot(RobotType.SOLDIER, dir) && toProduce){
				rc.buildRobot(RobotType.SOLDIER, dir);
				}
					

				// Move randomly
				tryMove(randomDirection());

				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Gardener Exception");
				e.printStackTrace();
			}
		}
	}

	static void runSoldier() throws GameActionException {
		System.out.println("I'm a soldier!");
		// The code you want your robot to perform every round should be in this loop
		while (true) {

			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				//sense enemy robots
				RobotInfo[] enemies = rc.senseNearbyRobots(RobotType.SOLDIER.sensorRadius, opponentTeam);
				// choose target and find direction
				MapLocation target = chooseTarget(enemies);
				Direction targetDir = rc.getLocation().directionTo(target);
				// fire at enemy
				if(enemies.length > 0){
					int shotType = chooseShotType(target);
					if(shotType == 1 && rc.canFireSingleShot()) {
						rc.fireSingleShot(targetDir);
					} else if (shotType == 3 && rc.canFireTriadShot()) {
						rc.fireTriadShot(targetDir);
					} else if(rc.canFirePentadShot()) {
						rc.firePentadShot(targetDir);
					}
				}
				// try to move towards enemy direction
				Direction dirOfMovement = moveDirection(targetDir);
				if(dirOfMovement != null && rc.canMove(dirOfMovement)) {
					rc.move(dirOfMovement);
				} else {
					Direction dir = randomDirection();
					if(rc.canMove(dir)) {
						rc.move(dir);
					}
				}
				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Soldier Exception");
				e.printStackTrace();
			}
		}
	}
	static MapLocation chooseTarget(RobotInfo[] enemies) {
		Map<RobotType, Integer> RobotTypePoints = new HashMap<RobotType, Integer>();
		RobotTypePoints.put(RobotType.TANK, 0);
		RobotTypePoints.put(RobotType.LUMBERJACK, 1);
		RobotTypePoints.put(RobotType.SOLDIER, 2);
		RobotTypePoints.put(RobotType.GARDENER, 3);
		RobotTypePoints.put(RobotType.SCOUT, 4);
		RobotTypePoints.put(RobotType.ARCHON, 5);
		float[] robotPoints = new float[enemies.length];
		for(int i = 0; i < enemies.length; i++) {
			//Adds 3 things together:
			//1: gets the distance to the other robot, squares it
			robotPoints[i] = enemies[i].location.distanceSquaredTo(rc.getLocation());
			//2: gets the percent health (as a decimal) that the other robot is at and multiplies that decimal by 5
			robotPoints[i] += (float)(enemies[i].getHealth()/enemies[i].getType().maxHealth)*5;
			//3: gets the map value for the type of robot
			robotPoints[i] += RobotTypePoints.get(enemies[i].getType());
		}
		int counter = 0;
		for(int i = 1; i < robotPoints.length; i++){
			if(robotPoints[counter] > robotPoints[i]){
				counter = i;
			}
		}
		
		
		return enemies[counter].location;
	}
	
	static int chooseShotType(MapLocation target) {
		int shots = 1;
		int robotsNearTarget = rc.senseNearbyRobots(target, 5, opponentTeam).length;
		if(robotsNearTarget >= 3) {
			if(robotsNearTarget >= 6) {
				shots = 5;
			} else {
				shots = 3;
			}
		}
		return shots;
	}

	static void runLumberjack() throws GameActionException {
		System.out.println("I'm a lumberjack!");
		Team enemy = rc.getTeam().opponent();

		// The code you want your robot to perform every round should be in this loop
		while (true) {

			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {

				// See if there are any enemy robots within striking range (distance 1 from lumberjack's radius)
				RobotInfo[] robots = rc.senseNearbyRobots(RobotType.LUMBERJACK.bodyRadius+GameConstants.LUMBERJACK_STRIKE_RADIUS, enemy);

				if(robots.length > 0 && !rc.hasAttacked()) {
					// Use strike() to hit all nearby robots!
					rc.strike();
				} else {
					// No close robots, so search for robots within sight radius
					robots = rc.senseNearbyRobots(-1,enemy);

					// If there is a robot, move towards it
					if(robots.length > 0) {
						MapLocation myLocation = rc.getLocation();
						MapLocation enemyLocation = robots[0].getLocation();
						Direction toEnemy = myLocation.directionTo(enemyLocation);

						tryMove(toEnemy);
					} else {
						// Move Randomly
						tryMove(randomDirection());
					}
				}

				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Lumberjack Exception");
				e.printStackTrace();
			}
		}
	}
	static void runTank() throws GameActionException {
		System.out.println("I'm a Tank!");

		// The code you want your robot to perform every round should be in this loop
		while (true) {
			try{
                                Team enemy = rc.getTeam().opponent();
				
				TreeInfo[] trees = rc.senseNearbyTrees(RobotType.TANK.sensorRadius, enemy);
				//check for sight range trees
				if(trees.length > 1) {
					// determine your current location
					MapLocation myLocation = rc.getLocation();
					
					//go to the tree with the highest bullet number
					int maxBulletTree = 0;
					for(int i = 0; i < trees.length; i++)
					{
					   if(trees[i].getContainedBullets() > trees[maxBulletTree].getContainedBullets())
						   { maxBulletTree = i; }
					   else if(trees[i].getContainedBullets() == trees[maxBulletTree].getContainedBullets()){
						   if(trees[i].getHealth() > trees[maxBulletTree].getHealth())
							   { maxBulletTree = i; }
					   }
					}
					
					MapLocation treeLocation = trees[maxBulletTree].getLocation();
					Direction toEnemy = myLocation.directionTo(treeLocation);
					tryMove(toEnemy);
					
				} 
				else if ( trees.length == 0)
				{
					//go to whatever enemy tree it can find
					MapLocation myLocation = rc.getLocation();
                                        MapLocation enemyLocation = trees[0].getLocation();
					Direction toEnemy = myLocation.directionTo(enemyLocation);

					tryMove(toEnemy);
				}
				
				else {
					// Move Randomly
					tryMove(randomDirection());
			}catch(Exception e){
				System.out.println("Tank Exception");
				e.printStackTrace();
			}

		}

	}

	static void runScout() throws GameActionException {
		System.out.println("I'm a Scout!");

		// The code you want your robot to perform every round should be in this loop
		while (true) {
			try{
				MapLocation[] pingedBots = rc.senseBroadcastingRobotLocations();
				for (int i = 0; i< pingedBots.length; i++)
				{
					//if (pingedBots[i])
				}
			}catch(Exception e){
				System.out.println("Scout Exception");
				e.printStackTrace();
			}
		}

	}
	
	static boolean willCollideWithMapLoc(BulletInfo bullet, MapLocation loc) {

		MapLocation myLocation = loc;
		// Get relevant bullet information
		Direction propagationDirection = bullet.dir;
		MapLocation bulletLocation = bullet.location;

		// Calculate bullet relations to this robot
		Direction directionToRobot = bulletLocation.directionTo(myLocation);
		float distToRobot = bulletLocation.distanceTo(myLocation);
		float theta = propagationDirection.radiansBetween(directionToRobot);

		// If theta > 90 degrees, then the bullet is traveling away from us and we can break early
		if (Math.abs(theta) > Math.PI/2) {
			return false;
		}



		// distToRobot is our hypotenuse, theta is our angle, and we want to know this length of the opposite leg.
		// This is the distance of a line that goes from myLocation and intersects perpendicularly with propagationDirection.
		// This corresponds to the smallest radius circle centered at our location that would intersect with the
		// line that is the path of the bullet.
		float perpendicularDist = (float)Math.abs(distToRobot * Math.sin(theta)); // soh cah toa :)
		
		return (perpendicularDist <= rc.getType().bodyRadius);
	}

	
	static Direction moveDirection(Direction movement){
		// Direction is movement that RC fired bullet
		// If rc didn't fire a bullet, put the direction as the direction 180 away from the archon
		BulletInfo[] bullets = rc.senseNearbyBullets();
		if(bullets.length > 0){
			boolean[] bulletsHit = new boolean[bullets.length];
			boolean danger = false;
			int counter = 0;
			while(!danger && counter<bulletsHit.length){
				if(willCollideWithMe(bullets[counter])){
					danger = true;
				}
				counter++;
			}

			if(danger){
				float rad = rc.getType().strideRadius;
				ArrayList<Tuple<Direction, Integer>> bulletsPerDir = new ArrayList<Tuple<Direction, Integer>>();
				int multiplier = 1;
				for(int i = 0; i < 180; i+= 30){
					for(int l = 0; l < 2; l++){
						if(l == 0){
							l = 1;
						}
						else{
							l = -1;
						}
						MapLocation newLoc = rc.getLocation().add(movement.opposite().rotateLeftDegrees(i * l), rad);
						for(int j = 0; j < bullets.length; j++){
							int bulletCounter = 0;
							for(int k = 0; k < bullets.length; k++){
								if(willCollideWithMapLoc(bullets[k], newLoc)){
									bulletCounter++;
								}
							}
							if(bulletCounter == 0){
								return rc.getLocation().directionTo(newLoc);
							}
							else{
								bulletsPerDir.add(new Tuple<Direction, Integer>(rc.getLocation().directionTo(newLoc), bulletCounter));
							}
						}
					}
				}
				int pos = 0;
				int minBullets = bulletsPerDir.get(0).second;
				//find position of the lowest bullets in direction
				for(int i = 1; i < bulletsPerDir.size(); i++) {
					int bulletsInDir = bulletsPerDir.get(i).second;
					if(bulletsInDir < minBullets) {
						minBullets = bulletsInDir;
						pos = i;
					}
				}
				return bulletsPerDir.get(pos).first;
			}
			else{
				return null;
			}
		}
		return null;
	}

	/**
	 * Returns a random Direction
	 * @return a random Direction
	 */
	static Direction randomDirection() {
		return new Direction((float)Math.random() * 2 * (float)Math.PI);
	}

	/**
	 * Attempts to move in a given direction, while avoiding small obstacles directly in the path.
	 *
	 * @param dir The intended direction of movement
	 * @return true if a move was performed
	 * @throws GameActionException
	 */
	static boolean tryMove(Direction dir) throws GameActionException {
		return tryMove(dir,20,3);
	}

	/**
	 * Attempts to move in a given direction, while avoiding small obstacles direction in the path.
	 *
	 * @param dir The intended direction of movement
	 * @param degreeOffset Spacing between checked directions (degrees)
	 * @param checksPerSide Number of extra directions checked on each side, if intended direction was unavailable
	 * @return true if a move was performed
	 * @throws GameActionException
	 */
	static boolean tryMove(Direction dir, float degreeOffset, int checksPerSide) throws GameActionException {

		// First, try intended direction
		if (rc.canMove(dir)) {
			rc.move(dir);
			return true;
		}

		// Now try a bunch of similar angles
		boolean moved = false;
		int currentCheck = 1;

		while(currentCheck<=checksPerSide) {
			// Try the offset of the left side
			if(rc.canMove(dir.rotateLeftDegrees(degreeOffset*currentCheck))) {
				rc.move(dir.rotateLeftDegrees(degreeOffset*currentCheck));
				return true;
			}
			// Try the offset on the right side
			if(rc.canMove(dir.rotateRightDegrees(degreeOffset*currentCheck))) {
				rc.move(dir.rotateRightDegrees(degreeOffset*currentCheck));
				return true;
			}
			// No move performed, try slightly further
			currentCheck++;
		}

		// A move never happened, so return false.
		return false;
	}

	/**
	 * A slightly more complicated example function, this returns true if the given bullet is on a collision
	 * course with the current robot. Doesn't take into account objects between the bullet and this robot.
	 *
	 * @param bullet The bullet in question
	 * @return True if the line of the bullet's path intersects with this robot's current position.
	 */
	static boolean willCollideWithMe(BulletInfo bullet) {
		MapLocation myLocation = rc.getLocation();

		// Get relevant bullet information
		Direction propagationDirection = bullet.dir;
		MapLocation bulletLocation = bullet.location;

		// Calculate bullet relations to this robot
		Direction directionToRobot = bulletLocation.directionTo(myLocation);
		float distToRobot = bulletLocation.distanceTo(myLocation);
		float theta = propagationDirection.radiansBetween(directionToRobot);

		// If theta > 90 degrees, then the bullet is traveling away from us and we can break early
		if (Math.abs(theta) > Math.PI/2) {
			return false;
		}

		// distToRobot is our hypotenuse, theta is our angle, and we want to know this length of the opposite leg.
		// This is the distance of a line that goes from myLocation and intersects perpendicularly with propagationDirection.
		// This corresponds to the smallest radius circle centered at our location that would intersect with the
		// line that is the path of the bullet.
		float perpendicularDist = (float)Math.abs(distToRobot * Math.sin(theta)); // soh cah toa :)

		return (perpendicularDist <= rc.getType().bodyRadius);
	}
}

/**
 * Tuple
 * 
 * a simple tuple class so that tuples can be used.
 */
class Tuple<X, Y> { 
	public X first; 
	public Y second; 
	public Tuple(X first, Y second) { 
		this.first = first; 
		this.second = second; 
	} 
}
