package examplefuncsplayer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import battlecode.common.*;

public strictfp class RobotPlayer {
	static RobotController rc;
	static int GARDENER_DISTRESS_CHANNEL = 2;
	static int GARDENER_PRODUCTION_CHANNEL = 1;
	static int ARCHON_DISTRESS_CHANNEL = 3;
	static int ARCHON_NUM_CHANNEL = 4;
	static int ARCHON_PRODUCTION_CHANNEL = 5;
	static int ARCHON_TOTAL_CHANNEL = 6;
	static int ARCHON_FUCK_CHANNEL = 7;
	static int TARGET_X_COORD = 20;
	static int TARGET_Y_COORD = 21;
	static Team ourTeam;
	static Team opponentTeam;
	

	/**
	 * run() is the method that is called when a robot is instantiated in the Battlecode world.
	 * If this method returns, the robot dies!
	 **/
	@SuppressWarnings("unused")
	public static void run(RobotController rc) throws GameActionException {

		// This is the RobotController object. You use it to perform actions from this robot,
		// and to get information on its current status.
		RobotPlayer.rc = rc;
		ourTeam = rc.getTeam();
		opponentTeam = rc.getTeam().opponent();


		// Here, we've separated the controls into a different method for each RobotType.
		// You can add the missing ones or rewrite this into your own control structure.
		switch (rc.getType()) {
		case ARCHON:
			runArchon();
			break;
		case GARDENER:
			runGardener();
			break;
		case SOLDIER:
			runSoldier();
			break;
		case LUMBERJACK:
			runLumberjack();
			break;
		case SCOUT:
			runScout();
			break;
		case TANK:
			runTank();
			break;

		}
	}


	static void runArchon() throws GameActionException {
		MapLocation[] initialArchonLoc = rc.getInitialArchonLocations(rc.getTeam());
		int numberOfArchons = initialArchonLoc.length;
		rc.broadcast(ARCHON_TOTAL_CHANNEL, numberOfArchons);
		int archonNum = 0;
		boolean pinged = false;
		int numDecs = 0;
		for(int i = 0; i < numberOfArchons; i++) {
			if(rc.getLocation().equals(initialArchonLoc[i])) {
				archonNum = i;
			}
		}
		rc.broadcast(GARDENER_PRODUCTION_CHANNEL, -2);
		// The code you want your robot to perform every round should be in this loop
		while (true) {
			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				donateBullets();
				if (rc.isBuildReady()){
					 Direction checkDir = Direction.getNorth();
					 boolean checker = false;
					 for (int i = 10; i<360; i+=10){
						 if (rc.canHireGardener(checkDir)){
							 checker = true;
							 break;
						 }
						 checkDir.rotateLeftDegrees(i);
					 }
					 if(!checker){
						 rc.broadcast(ARCHON_FUCK_CHANNEL, 1);
					 }
				}
				if (rc.readBroadcast(ARCHON_FUCK_CHANNEL) == 1){
					 archonNum = cycleArchonNums(archonNum);
					 if (archonNum == 2){
						 rc.broadcast(ARCHON_FUCK_CHANNEL, 0);
						 }
				}
				
				if (rc.getRoundNum() % 500 == 100 && archonNum == 0){
					rc.broadcast(GARDENER_PRODUCTION_CHANNEL, rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL)-rc.readBroadcast(ARCHON_TOTAL_CHANNEL));
				}
				if (rc.getHealth()<10 && !pinged){
					rc.broadcast(ARCHON_DISTRESS_CHANNEL, rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)+1);
					rc.broadcast(ARCHON_NUM_CHANNEL, archonNum);
					rc.broadcast(ARCHON_TOTAL_CHANNEL, rc.readBroadcast(ARCHON_TOTAL_CHANNEL)-1);
					pinged = true;
				}
				if (rc.readBroadcast(ARCHON_TOTAL_CHANNEL)-rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)<rc.readBroadcast(ARCHON_TOTAL_CHANNEL)){
					if (archonNum>rc.readBroadcast(ARCHON_NUM_CHANNEL) && numDecs<rc.readBroadcast(ARCHON_DISTRESS_CHANNEL)){
						archonNum--;
						numDecs++;
					}
					
				}
				// Generate a random direction
				Direction dir = randomDirection();
				int distressSignals = rc.readBroadcast(GARDENER_DISTRESS_CHANNEL);
				int deadGardeners = rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL);
				if (rc.canHireGardener(dir) && checkGardeners(deadGardeners, distressSignals)) {
					// figure out which archon will build gardener
					if(Math.abs(deadGardeners) % (rc.readBroadcast(ARCHON_TOTAL_CHANNEL)) == archonNum) {
						rc.hireGardener(dir);
					}					
				}
				Direction randDir = randomDirection();
				if (rc.canMove(randDir)){
					tryMove(randDir);
				}
				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Archon Exception");
				e.printStackTrace();
			}
		}
	}
	
	private static int cycleArchonNums(int archonNum) throws GameActionException{
		 switch (archonNum){
		 	case 0:
		 		return 2;
		 	case 1:
		 		return 0;
		 	case 2:
		 		return 1;
		 }
		 return -1;
	}
	
	static boolean checkGardeners(int deadGardeners, int distressSignals) throws GameActionException{
		if (distressSignals > deadGardeners){
			return true;
		}
		return false;
	}

	static void donateBullets() throws GameActionException {
		float bullets = rc.getTeamBullets();
		float surplus = bullets - 1000 + rc.getRoundNum() / 10;
		if(surplus > 0) {
			rc.donate(surplus - (surplus % 10));
		}
		// if can win this turn, then win this turn
		if(rc.getTeamVictoryPoints() + (bullets / (7.5 + rc.getRoundNum() * 12.5 / 3000)) >= 1000){
			rc.donate(bullets);
		}
	}
	
	static void runGardener() throws GameActionException {
		System.out.println("I'm a gardener!");
		boolean toProduce = false;
		boolean pinged = false;
		int buildCount = 0;

		rc.broadcast(GARDENER_PRODUCTION_CHANNEL, rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL)+1);
		int id = Math.abs(rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL))%2;
		System.out.println(id);
		int spawnRound = rc.getRoundNum();
		int pauseProductionRound = rc.getRoundLimit();
		int productionCount = 0;
		ArrayList<RobotType> productionSchedule = new ArrayList<RobotType>();
		productionSchedule.add(RobotType.LUMBERJACK);
		productionSchedule.add(RobotType.LUMBERJACK);
		productionSchedule.add(RobotType.SCOUT);
		productionSchedule.add(RobotType.TANK);
		while (true){
			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				
				System.out.println(id);
				// Generate a random direction
				Direction dir = randomDirection();
				buildCount++;
			    if(rc.getRoundNum() < spawnRound + 50) {
			    	tryMove(dir);
			    } else {
			    	// moves for us
					GardenersMove(id);
			    }
			    TreeInfo[] neutralTrees = rc.senseNearbyTrees(rc.getType().sensorRadius, Team.NEUTRAL);
				if (neutralTrees.length > 0) {
					shakeTrees(neutralTrees);
				}
				if (rc.getHealth()<5 && !pinged){
					rc.broadcast(GARDENER_DISTRESS_CHANNEL, rc.readBroadcast(GARDENER_DISTRESS_CHANNEL)+1);
					pinged = true;
				}
				if (rc.readBroadcast(GARDENER_DISTRESS_CHANNEL) != rc.readBroadcast(GARDENER_PRODUCTION_CHANNEL)) {
					toProduce = false;
				} else {
					toProduce = true;
				}
				RobotType potentialRobot = productionSchedule.get(productionCount % productionSchedule.size());
				if(toProduce && rc.canBuildRobot(potentialRobot, dir) && id == 1) {
					rc.buildRobot(potentialRobot, dir);
					productionCount++;
					if(productionCount == productionSchedule.size()) {
						productionCount = 0;
					}
				}

				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Gardener Exception");
				e.printStackTrace();
			}
		}
	}
	static void GardenersMove(int id) throws GameActionException{
		try{
			//Change to direction to closest offmap spot plus 90 degrees
			MapLocation loc = rc.getLocation();
			Direction treeDir = null;
			if (rc.onTheMap(loc.add(Direction.getNorth(), 5.0f))){
				treeDir = Direction.getEast();
			}
			if (rc.onTheMap(loc.add(Direction.getEast(), 5.0f))){
				treeDir = Direction.getSouth();
			}
			if (rc.onTheMap(loc.add(Direction.getSouth(), 5.0f))){
				treeDir = Direction.getWest();
			}
			if (rc.onTheMap(loc.add(Direction.getWest(), 5.0f))){
				treeDir = Direction.getNorth();
			}
			//tree gardener id 0
			if(id == 0){
				TreeInfo[] nearbyTrees = rc.senseNearbyTrees(3, rc.getTeam());
				if(nearbyTrees.length < 6){
					if(nearbyTrees.length==0){
						for(int i = 0; i < 360; i+=60){
							if(rc.canPlantTree(treeDir.rotateLeftDegrees(i))){
								rc.plantTree(treeDir.rotateLeftDegrees(i));
							}
						}
					}else{
					Direction dir = rc.getLocation().directionTo(nearbyTrees[0].location);
					for(int i = 60; i < 360; i+= 60){
						if(rc.canPlantTree(dir.rotateLeftDegrees(i))){
							rc.plantTree(dir.rotateLeftDegrees(i));
						}
						
					}
				}
				}
				if(nearbyTrees.length > 0){
					float[] remainingHealth = new float[nearbyTrees.length];
					for(int j = 0; j < nearbyTrees.length; j++){
						remainingHealth[j] = nearbyTrees[j].getHealth();
					}
					int lowestSpot = 0;
					for(int k = 1; k < remainingHealth.length; k++){
						if(remainingHealth[k] < remainingHealth[lowestSpot]){
							lowestSpot = k;
						}
					}
					if (rc.canMove(rc.getLocation().directionTo(nearbyTrees[lowestSpot].location))){
						rc.move(rc.getLocation().directionTo(nearbyTrees[lowestSpot].location));
					}
					if (nearbyTrees.length > lowestSpot){
					if(rc.canWater(nearbyTrees[lowestSpot].getLocation())){
						rc.water(nearbyTrees[lowestSpot].getLocation());
					}
					}
				}
			}else{
				TreeInfo[] nearbyTrees = rc.senseNearbyTrees(2, rc.getTeam());
				if(nearbyTrees.length < 5){
					if(nearbyTrees.length==0){
						for(int i = 0; i < 360; i+=60){
							if(rc.canPlantTree(treeDir.rotateLeftDegrees(i))){
								rc.plantTree(treeDir.rotateLeftDegrees(i));
							}
						}
					}else{
					Direction dir = rc.getLocation().directionTo(nearbyTrees[0].location);
					for(int i = 60; i < 300; i+= 60){
						if(rc.canPlantTree(dir.rotateLeftDegrees(i))){
							rc.plantTree(dir.rotateLeftDegrees(i));
						}
						
					}
				}
				}
				if(nearbyTrees.length > 0){
					float[] remainingHealth = new float[nearbyTrees.length];
					for(int j = 0; j < nearbyTrees.length; j++){
						remainingHealth[j] = nearbyTrees[j].getHealth();
					}
					int lowestSpot = 0;
					for(int k = 1; k < remainingHealth.length; k++){
						if(remainingHealth[k] < remainingHealth[lowestSpot]){
							lowestSpot = k;
						}
					}
					if (rc.canMove(rc.getLocation().directionTo(nearbyTrees[lowestSpot].location))){
						rc.move(rc.getLocation().directionTo(nearbyTrees[lowestSpot].location));
					}
					if (nearbyTrees.length > lowestSpot){
					if(rc.canWater(nearbyTrees[lowestSpot].getLocation())){
						rc.water(nearbyTrees[lowestSpot].getLocation());
					}
					}
				}
			}
		}catch(Exception e){
			System.out.println(e);
			e.printStackTrace();
		}
}


	static void runSoldier() throws GameActionException {
		System.out.println("I'm a soldier!");
		// The code you want your robot to perform every round should be in this loop
		while (true) {

			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				//sense enemy robots and trees
				Direction targetDir = randomDirection();
				RobotInfo[] enemies = rc.senseNearbyRobots(RobotType.SOLDIER.sensorRadius, opponentTeam);
				TreeInfo[] trees = rc.senseNearbyTrees(rc.getType().sensorRadius, opponentTeam);
				if(enemies.length > 0 || trees.length > 0){
					targetDir = attack(enemies, trees);
				}
				
				// get target location and direction
				int xCoord = rc.readBroadcast(TARGET_X_COORD);
				int yCoord = rc.readBroadcast(TARGET_Y_COORD);
				MapLocation targetLoc = new MapLocation(xCoord, yCoord);
				
				// if at target, broadcast
				if (xCoord != 0) {
					if(rc.getLocation().isWithinDistance(targetLoc, 2)) {
						rc.broadcast(xCoord, 0);
						rc.broadcast(yCoord, 0);
					}
					targetDir = rc.getLocation().directionTo(targetLoc);
					if(!rc.hasMoved() && rc.canMove(targetDir)) {
						rc.move(targetDir);
					}
				}
				
				// try to move towards enemy direction
				Direction dirOfMovement = moveDirection(targetDir);
				if(dirOfMovement != null && rc.canMove(dirOfMovement)) {
					rc.move(dirOfMovement);
				}
				else {
					Direction randomDir = randomDirection();
					if(rc.canMove(randomDir)){
						tryMove(randomDir);
					}					
				}
				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Soldier Exception");
				e.printStackTrace();
			}
		}
	}
	
	static void shakeTrees(TreeInfo[] neutralTrees) throws GameActionException {
		if (neutralTrees.length > 0){
			ArrayList<TreeInfo> bulleted = new ArrayList<TreeInfo>();
			for (int i = 0; i<neutralTrees.length; i++){
				if (neutralTrees[i].containedBullets > 0){
					bulleted.add(neutralTrees[i]);
					}
				}
			if (bulleted.size() > 0){
			float dist = 10000;
			int closest = 0;
			for (int i = 0; i<bulleted.size(); i++){
			if (bulleted.get(i).getLocation().distanceTo(rc.getLocation())<dist){
				dist = bulleted.get(i).getLocation().distanceTo(rc.getLocation());
				closest = i;
			}
			}
			if(rc.canMove(rc.getLocation().directionTo(bulleted.get(closest).getLocation())) && !rc.hasMoved() && rc.getType() != RobotType.GARDENER){
			rc.move(rc.getLocation().directionTo(bulleted.get(closest).getLocation()));
			}
			}
			for (int i = 0; i<neutralTrees.length; i++){
				MapLocation loc = neutralTrees[i].location;
				if(rc.canShake(loc)){
					rc.shake(loc);
				}
			}
		}
	}

	static Direction attack(RobotInfo[] enemies, TreeInfo[] trees) throws GameActionException {
		MapLocation target = null;
		Direction targetDir = null;
		if(enemies.length > 0) {
			target = chooseRobotTarget(enemies);
			if(target != null) {
				targetDir = rc.getLocation().directionTo(target);
				int shotType = chooseShotType(target);
				if(shotType == 1 && rc.canFireSingleShot()) {
					rc.fireSingleShot(targetDir);
				} else if (shotType == 3 && rc.canFireTriadShot()) {
					rc.fireTriadShot(targetDir);
				} else if(rc.canFirePentadShot()) {
					rc.firePentadShot(targetDir);
				}
			}
		}
		
		if(targetDir == null) {
			if(trees.length > 0) {
				target = chooseTreeTarget(trees);
				targetDir = rc.getLocation().directionTo(target);
				if(rc.canFireSingleShot())
				rc.fireSingleShot(targetDir);
				return targetDir;
			} else {
				return randomDirection();
			}
		} else {
			return targetDir;
		}
	}
	
	static MapLocation chooseTreeTarget(TreeInfo[] trees) throws GameActionException {
		float[] treePoints = new float[trees.length];
		MapLocation myLoc = rc.getLocation();
		float minPoint = 1000;
		MapLocation treeLoc = trees[0].location;
		for(int i = 0; i < trees.length; i++) {
			TreeInfo tree = trees[i];
			treePoints[i] = myLoc.distanceSquaredTo(tree.location) / 10;
			treePoints[i] += tree.health / tree.maxHealth * 10;
			treePoints[i] += findObstacleBetweenTreeTarget(myLoc.distanceTo(treeLoc), tree);
			if(treePoints[i] < minPoint) {
				minPoint = treePoints[i];
				treeLoc = tree.location;
			}
		}
		return treeLoc;
	}

	
	static float findObstacleBetweenTreeTarget(float distance, TreeInfo target) throws GameActionException {
		float points = 0;
		float minDistance = rc.getType().bodyRadius;
		float maxDistance = distance - target.getRadius();
		MapLocation myLoc = rc.getLocation();
		Direction dir = myLoc.directionTo(target.location);
		boolean isObstacle = false;
		
		// loop through locations between yourself and target at intervals of 1
		while(!isObstacle && minDistance < maxDistance) {
			// get location between you and target
			MapLocation loc = myLoc.add(dir, minDistance);
			if(!rc.canSenseLocation(loc)) {
				break;
			}
			// find if robot or tree at location
			if(rc.isLocationOccupiedByRobot(loc)) {
				//obstacle found
				isObstacle = true;
				RobotInfo robot = rc.senseRobotAtLocation(loc);
				// if our team, don't attack; if opponent, then replace target with obstacle
				if(robot.team.equals(ourTeam)) {
					points += 1000;
				}
			} else if (rc.isLocationOccupiedByTree(loc)) {
				//obstacle found
				isObstacle = true;
				TreeInfo tree = rc.senseTreeAtLocation(loc);
				// if ourTeam, don't attack; if opponent, replace with 18; if neutral, don't attack
				if(tree.team.equals(ourTeam)) {
					points += 1000;
				} else if (tree.team.equals(Team.NEUTRAL)) {
					points += 1000;
				}
			}
			minDistance++;
		}
		
		return points;
	}

	static float findObstacleBetweenTarget(float distance, RobotInfo target, Map<RobotType, Integer> RobotTypePoints) throws GameActionException {
		float points = 0;
		float minDistance = rc.getType().bodyRadius;
		float maxDistance = distance - target.getRadius();
		MapLocation myLoc = rc.getLocation();
		Direction dir = myLoc.directionTo(target.location);
		boolean isObstacle = false;
		
		// loop through locations between yourself and target at intervals of 1
		while(!isObstacle && minDistance < maxDistance) {
			// get location between you and target
			MapLocation loc = myLoc.add(dir, minDistance);
			if(!rc.canSenseLocation(loc)) {
				break;
			}
			// find if robot or tree at location
			if(rc.isLocationOccupiedByRobot(loc)) {
				//obstacle found
				isObstacle = true;
				RobotInfo robot = rc.senseRobotAtLocation(loc);
				// if our team, don't attack; if opponent, then replace target with obstacle
				if(robot.team.equals(ourTeam)) {
					points += 1000;
				} else {
					points += RobotTypePoints.get(robot.type) * 3 - RobotTypePoints.get(target.type);
				}
			} else if (rc.isLocationOccupiedByTree(loc)) {
				//obstacle found
				isObstacle = true;
				TreeInfo tree = rc.senseTreeAtLocation(loc);
				// if ourTeam, don't attack; if opponent, replace with 18; if neutral, don't attack
				if(tree.team.equals(ourTeam)) {
					points += 1000;
				} else if (tree.team.equals(opponentTeam)) {
					points += 18 - RobotTypePoints.get(target.type);
				} else {
					points += 1000;
				}
			}
			minDistance++;
		}
		
		return points;
	}

	static MapLocation chooseRobotTarget(RobotInfo[] enemies) throws GameActionException {
		Map<RobotType, Integer> RobotTypePoints = new HashMap<RobotType, Integer>();
		RobotTypePoints.put(RobotType.TANK, 0);
		RobotTypePoints.put(RobotType.LUMBERJACK, 1);
		RobotTypePoints.put(RobotType.SOLDIER, 2);
		RobotTypePoints.put(RobotType.GARDENER, 3);
		RobotTypePoints.put(RobotType.SCOUT, 4);
		RobotTypePoints.put(RobotType.ARCHON, 5);
		float[] robotPoints = new float[enemies.length];
		for(int i = 0; i < enemies.length; i++) {
			//Adds 4 things together:
			//1: gets the distance to the other robot, squares it
			float distance = enemies[i].location.distanceTo(rc.getLocation());
			robotPoints[i] = distance * distance /10;
			//2: gets the percent health (as a decimal) that the other robot is at and multiplies that decimal by 10
			robotPoints[i] += (float)(enemies[i].getHealth()/enemies[i].getType().maxHealth)*10;
			//3: gets the map value for the type of robot
			robotPoints[i] += RobotTypePoints.get(enemies[i].getType())*3;
			//4: finds if there is something in between you and the target
			robotPoints[i] += findObstacleBetweenTarget(distance, enemies[i], RobotTypePoints);
			
		}
		int counter = 0;
		for(int i = 1; i < robotPoints.length; i++){
			if(robotPoints[counter] < robotPoints[i]){
				counter = i;
			}
		}
		
		if(robotPoints[counter] > 500) {
			return null;
		} else {
			return enemies[counter].location;
		}
	}
	
	static int chooseShotType(MapLocation target) {
		int shots = 1;
		int robotsNearTarget = rc.senseNearbyRobots(target, 5, opponentTeam).length;
		if(robotsNearTarget >= 3) {
			if(robotsNearTarget >= 6) {
				shots = 5;
			} else {
				shots = 3;
			}
		}
		return shots;
	}

	static void runLumberjack() throws GameActionException {
		System.out.println("I'm a lumberjack!");

		// The code you want your robot to perform every round should be in this loop
		while (true) {

			// Try/catch blocks stop unhandled exceptions, which cause your robot to explode
			try {
				
				BulletInfo[] bullets = rc.senseNearbyBullets();
				
				TreeInfo[] neutralTrees = rc.senseNearbyTrees(RobotType.LUMBERJACK.sensorRadius, Team.NEUTRAL);
				TreeInfo[] enemyTrees = rc.senseNearbyTrees(RobotType.LUMBERJACK.sensorRadius, opponentTeam);

				//sense enemy robots and trees
				Direction targetDir = randomDirection();
				RobotInfo[] enemies = rc.senseNearbyRobots(RobotType.LUMBERJACK.sensorRadius, opponentTeam);
				if(enemies.length > 0 || enemyTrees.length > 0){
					targetDir = attack(enemies, enemyTrees);
				}
				
				// get target location and direction
				int xCoord = rc.readBroadcast(TARGET_X_COORD);
				int yCoord = rc.readBroadcast(TARGET_Y_COORD);
				MapLocation targetLoc = new MapLocation(xCoord, yCoord);
				
				// if at target, broadcast
				if (xCoord != 0) {
					if(rc.getLocation().isWithinDistance(targetLoc, 2)) {
						rc.broadcast(xCoord, 0);
						rc.broadcast(yCoord, 0);
					}
					targetDir = rc.getLocation().directionTo(targetLoc);
					if(!rc.hasMoved() && rc.canMove(targetDir)) {
						rc.move(targetDir);
					}
				}
				
				MapLocation myLoc = rc.getLocation();
				if(enemyTrees.length > 0 ) {
					TreeInfo closestTree = enemyTrees[0];
					float distance = Float.MAX_VALUE;
					for(int i = 0; i < enemyTrees.length; i++) {
						float enemyDistance = enemyTrees[i].location.distanceTo(myLoc);
						if(enemyDistance < distance) {
							distance = enemyDistance;
							closestTree = enemyTrees[i];
						}
					}
					Direction treeDir = rc.getLocation().directionTo(closestTree.location);
					if(rc.canChop(closestTree.location)) {
						rc.chop(closestTree.location);
					} else if(rc.canMove(treeDir)){
						rc.move(treeDir);
					}
					Direction dirOfMovement = moveDirection(treeDir);
					if(dirOfMovement != null && rc.canMove(dirOfMovement)) {
						rc.move(dirOfMovement);
					}
				} else if (neutralTrees.length > 0) {
					TreeInfo closestTree = neutralTrees[0];
					float distance = closestTree.location.distanceTo(myLoc);
					for(int i = 1; i < neutralTrees.length; i++) {
						float enemyDistance = neutralTrees[i].location.distanceTo(myLoc);
						if(enemyDistance < distance) {
							distance = enemyDistance;
							closestTree = neutralTrees[i];
						}
					}
					Direction treeDir = rc.getLocation().directionTo(closestTree.location);
					if(rc.canChop(closestTree.location)) {
						rc.chop(closestTree.location);
					} else {
						rc.move(rc.getLocation().directionTo(closestTree.location));
					}
					Direction dirOfMovement = moveDirection(treeDir);
					if(dirOfMovement != null && rc.canMove(dirOfMovement)) {
						rc.move(dirOfMovement);
					}
				}
				
				if(!rc.hasMoved()) {
					tryMove(randomDirection());
				}

				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			} catch (Exception e) {
				System.out.println("Lumberjack Exception");
				e.printStackTrace();
			}
		}
	}
	static void runTank() throws GameActionException {
		System.out.println("I'm a Tank!");
		//choose location here so it doesnt change every round
		MapLocation myLocation = rc.getLocation();
		MapLocation[] initialArchons = rc.getInitialArchonLocations(rc.getTeam().opponent());
		Direction attack = myLocation.directionTo(initialArchons[(int)Math.random()*initialArchons.length]);

		// The code you want your robot to perform every round should be in this loop
		while (true) {
			try{
				
				//sense enemy robots and trees
				Direction targetDir = randomDirection();
				RobotInfo[] enemies = rc.senseNearbyRobots(RobotType.SOLDIER.sensorRadius, opponentTeam);
				TreeInfo[] trees = rc.senseNearbyTrees(rc.getType().sensorRadius, opponentTeam);
				if(enemies.length > 0 || trees.length > 0){
					targetDir = attack(enemies, trees);
				}
				
				// get target location and direction
				int xCoord = rc.readBroadcast(TARGET_X_COORD);
				int yCoord = rc.readBroadcast(TARGET_Y_COORD);
				MapLocation targetLoc = new MapLocation(xCoord, yCoord);
				
				// if at target, broadcast
				if (xCoord != 0) {
					if(rc.getLocation().isWithinDistance(targetLoc, 2)) {
						rc.broadcast(xCoord, 0);
						rc.broadcast(yCoord, 0);
					}
					targetDir = rc.getLocation().directionTo(targetLoc);
					if(!rc.hasMoved() && rc.canMove(targetDir)) {
						rc.move(targetDir);
					}
				}
				
				// try to move towards enemy direction
				Direction dirOfMovement = moveDirection(targetDir);
				if(dirOfMovement != null && rc.canMove(dirOfMovement)) {
					rc.move(dirOfMovement);
				}
				else {
					Direction randomDir = randomDirection();
					if(rc.canMove(randomDir)){
						tryMove(randomDir);
					}					
				}
				
				
				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();

			}catch(Exception e){
				System.out.println("Tank Exception");
				e.printStackTrace();
			}
		}
	}	

	static void runScout() throws GameActionException {
		System.out.println("I'm a Scout!");
		
		RobotInfo[] initialRobots = rc.senseNearbyRobots(2, ourTeam);
		Direction bounceDirection = randomDirection();
		for(int i = 0; i < initialRobots.length; i++) {
			RobotInfo robot = initialRobots[i];
			if(robot.type.equals(RobotType.GARDENER)) {
				bounceDirection = robot.location.directionTo(rc.getLocation());
			}
		}

		// The code you want your robot to perform every round should be in this loop
		while (true) {
			try{
				TreeInfo[] neutralTrees = rc.senseNearbyTrees(rc.getType().sensorRadius, Team.NEUTRAL);
				if (neutralTrees.length > 0) {
					shakeTrees(neutralTrees);
				}
				//sense enemy robots and trees
				RobotInfo[] enemies = rc.senseNearbyRobots(RobotType.SOLDIER.sensorRadius, opponentTeam);
				TreeInfo[] trees = rc.senseNearbyTrees(rc.getType().sensorRadius, opponentTeam);
				if(enemies.length > 0 || trees.length > 0){
					//Direction targetDir = attack(enemies, trees);
					if (rc.readBroadcast(TARGET_X_COORD) == 0) {
						reportEnemyArchons(enemies);
					}
				} else if (!rc.hasMoved()) {
					bounceDirection = bounce(bounceDirection);
				}
				// Clock.yield() makes the robot wait until the next turn, then it will perform this loop again
				Clock.yield();
			}catch(Exception e){
				System.out.println("Scout Exception");
				e.printStackTrace();
			}
		}

	}
	
	static void reportEnemyArchons(RobotInfo[] enemies) throws GameActionException {
		int i = 0;
		boolean found = false;
		while (!found && i < enemies.length) {
			RobotInfo robot = enemies[i];
			if (robot.type.equals(RobotType.ARCHON)) {
				found = true;
				rc.broadcast(TARGET_X_COORD, Math.round(robot.location.x));
				rc.broadcast(TARGET_Y_COORD, Math.round(robot.location.y));
				System.out.println(robot.location.x);
				System.out.println(robot.location.y);
			}
			i++;
		}
	}
	
	static Direction bounce(Direction bounceDirection) throws GameActionException {
		MapLocation moveLocation = rc.getLocation().add(bounceDirection, rc.getType().strideRadius);
		if(rc.canMove(moveLocation) && rc.onTheMap(moveLocation)) {
			rc.move(moveLocation);
		} else {
			bounceDirection = bounceDirection.rotateRightDegrees(90);
		}
		return bounceDirection;
	}
	
	static boolean willCollideWithMapLoc(BulletInfo bullet, MapLocation loc) {

		MapLocation myLocation = loc;
		// Get relevant bullet information
		Direction propagationDirection = bullet.dir;
		MapLocation bulletLocation = bullet.location;

		// Calculate bullet relations to this robot
		Direction directionToRobot = bulletLocation.directionTo(myLocation);
		float distToRobot = bulletLocation.distanceTo(myLocation);
		float theta = propagationDirection.radiansBetween(directionToRobot);

		// If theta > 90 degrees, then the bullet is traveling away from us and we can break early
		if (Math.abs(theta) > Math.PI/2) {
			return false;
		}



		// distToRobot is our hypotenuse, theta is our angle, and we want to know this length of the opposite leg.
		// This is the distance of a line that goes from myLocation and intersects perpendicularly with propagationDirection.
		// This corresponds to the smallest radius circle centered at our location that would intersect with the
		// line that is the path of the bullet.
		float perpendicularDist = (float)Math.abs(distToRobot * Math.sin(theta)); // soh cah toa :)
		
		return (perpendicularDist <= rc.getType().bodyRadius);
	}

	
	static Direction moveDirection(Direction movement){
		// Direction is movement that RC fired bullet
		// If rc didn't fire a bullet, put the direction as the direction 180 away from the archon
		BulletInfo[] bullets = rc.senseNearbyBullets();
		if(bullets.length > 0){
			boolean[] bulletsHit = new boolean[bullets.length];
			boolean danger = false;
			int counter = 0;
			while(!danger && counter<bulletsHit.length){
				if(willCollideWithMe(bullets[counter])){
					danger = true;
				}
				counter++;
			}

			if(danger){
				float rad = rc.getType().strideRadius;
				ArrayList<Tuple<Direction, Integer>> bulletsPerDir = new ArrayList<Tuple<Direction, Integer>>();
				int multiplier = 1;
				for(int i = 0; i < 180; i+= 30){
					for(int l = 0; l < 2; l++){
						if(l == 0){
							l = 1;
						}
						else{
							l = -1;
						}
						MapLocation newLoc = rc.getLocation().add(movement.opposite().rotateLeftDegrees(i * l), rad);
						for(int j = 0; j < bullets.length; j++){
							int bulletCounter = 0;
							for(int k = 0; k < bullets.length; k++){
								if(willCollideWithMapLoc(bullets[k], newLoc)){
									bulletCounter++;
								}
							}
							if(bulletCounter == 0){
								return rc.getLocation().directionTo(newLoc);
							}
							else{
								bulletsPerDir.add(new Tuple<Direction, Integer>(rc.getLocation().directionTo(newLoc), bulletCounter));
							}
						}
					}
				}
				int pos = 0;
				int minBullets = bulletsPerDir.get(0).second;
				//find position of the lowest bullets in direction
				for(int i = 1; i < bulletsPerDir.size(); i++) {
					int bulletsInDir = bulletsPerDir.get(i).second;
					if(bulletsInDir < minBullets) {
						minBullets = bulletsInDir;
						pos = i;
					}
				}
				return bulletsPerDir.get(pos).first;
			}
			else{
				return null;
			}
		}
		return null;
	}

	/**
	 * Returns a random Direction
	 * @return a random Direction
	 */
	static Direction randomDirection() {
		return new Direction((float)Math.random() * 2 * (float)Math.PI);
	}

	/**
	 * Attempts to move in a given direction, while avoiding small obstacles directly in the path.
	 *
	 * @param dir The intended direction of movement
	 * @return true if a move was performed
	 * @throws GameActionException
	 */
	static boolean tryMove(Direction dir) throws GameActionException {
		return tryMove(dir,20,3);
	}

	/**
	 * Attempts to move in a given direction, while avoiding small obstacles direction in the path.
	 *
	 * @param dir The intended direction of movement
	 * @param degreeOffset Spacing between checked directions (degrees)
	 * @param checksPerSide Number of extra directions checked on each side, if intended direction was unavailable
	 * @return true if a move was performed
	 * @throws GameActionException
	 */
	static boolean tryMove(Direction dir, float degreeOffset, int checksPerSide) throws GameActionException {

		// First, try intended direction
		if (rc.canMove(dir) && !rc.hasMoved()) {
			rc.move(dir);
			return true;
		}

		// Now try a bunch of similar angles
		boolean moved = false;
		int currentCheck = 1;

		while(currentCheck<=checksPerSide) {
			// Try the offset of the left side
			if(rc.canMove(dir.rotateLeftDegrees(degreeOffset*currentCheck)) && !rc.hasMoved()) {
				rc.move(dir.rotateLeftDegrees(degreeOffset*currentCheck));
				return true;
			}
			// Try the offset on the right side
			if(rc.canMove(dir.rotateRightDegrees(degreeOffset*currentCheck)) && !rc.hasMoved()) {
				rc.move(dir.rotateRightDegrees(degreeOffset*currentCheck));
				return true;
			}
			// No move performed, try slightly further
			currentCheck++;
		}

		// A move never happened, so return false.
		return false;
	}

	/**
	 * A slightly more complicated example function, this returns true if the given bullet is on a collision
	 * course with the current robot. Doesn't take into account objects between the bullet and this robot.
	 *
	 * @param bullet The bullet in question
	 * @return True if the line of the bullet's path intersects with this robot's current position.
	 */
	static boolean willCollideWithMe(BulletInfo bullet) {
		MapLocation myLocation = rc.getLocation();

		// Get relevant bullet information
		Direction propagationDirection = bullet.dir;
		MapLocation bulletLocation = bullet.location;

		// Calculate bullet relations to this robot
		Direction directionToRobot = bulletLocation.directionTo(myLocation);
		float distToRobot = bulletLocation.distanceTo(myLocation);
		float theta = propagationDirection.radiansBetween(directionToRobot);

		// If theta > 90 degrees, then the bullet is traveling away from us and we can break early
		if (Math.abs(theta) > Math.PI/2) {
			return false;
		}

		// distToRobot is our hypotenuse, theta is our angle, and we want to know this length of the opposite leg.
		// This is the distance of a line that goes from myLocation and intersects perpendicularly with propagationDirection.
		// This corresponds to the smallest radius circle centered at our location that would intersect with the
		// line that is the path of the bullet.
		float perpendicularDist = (float)Math.abs(distToRobot * Math.sin(theta)); // soh cah toa :)

		return (perpendicularDist <= rc.getType().bodyRadius);
	}
}

/**
 * Tuple
 * 
 * a simple tuple class so that tuples can be used.
 */
class Tuple<X, Y> { 
	public X first; 
	public Y second; 
	public Tuple(X first, Y second) { 
		this.first = first; 
		this.second = second; 
	} 
}
